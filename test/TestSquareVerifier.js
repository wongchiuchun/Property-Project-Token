// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps

    
// Test verification with incorrect proof
var Verifier = artifacts.require("Verifier");

contract('Verifier', accounts => {

    const owner = accounts[0];


    describe('should verify the result', function () {
        before (async function () { 
            this.contract = await Verifier.deployed({from: owner});
        })
    
        it('should verify', async function () { 
            let proof = {
                "proof":
                {
                    "A":["0x18917ce5503c103407af47249068c9905a204df32015f975065f5c772d131562", "0x28d13bfc3808d3932903406b8803c6056415f25cc3c7237bcdf455b0bf1c4206"],
                    "A_p":["0x18a99dfa0288309f5aa9c5cd9d2ecd4a1ba14541bfdeb02aea142ad4a1a963ce", "0x24ade94614622e12994a11be687ee03e74d1636623633495b1e47dfeef79a4e2"],
                    "B":
                        [["0x1a39190ae2a224ceee6709a21ce1414ab43f1556b6544b89dcc26143ba978b2c", "0x0a7d94efc1e79d73dbb242a33c586deff7b5b45828f1ac6ab776b75bd21eace0"], ["0x16c45cc86f6cad1a0fb7bf1b29ed56c6101acd840c95be71b749bf70c1d13557", "0x22f269a3792bfa65d7c512bf407d84586820dd8594fb08fd46ac0c99794ccf03"]],
                    
                    "B_p":["0x2926f95a4444050f3578679d6a886acb77c77707780cbc4acded98334c6ed0f4", "0x0b703fd2b00f4384a7c50e9d377d51fdc6329add8f7f6aa02c429577b422c894"],
                    "C":["0x20e27b95f0ef20edf796e6f8b34adb80a2c0233b03fa98619563fd57d4fe01b9", "0x2ae3430a5c11a9bed4baaca2fe2fb7778cdad7236b2052010b65ff771b4af881"],
                    "C_p":["0x018c16ceaec70e401aff3a86292dd760f35b65bda0d3c83d3a81c77e97a8c448", "0x268af8ce24089a7a8543e4d995d014fedc8b04efe46f5a4e32b40ea1789c4d54"],
                    "H":["0x2c7bbdb94e2a6f9f7a01681bfe9d5ffc2a21dcd3d808740ff1299028e110604c", "0x1d6048e4bcebc0274fe873b2844a541e58eca966bb42b1163658bf63da40b29e"],
                    "K":["0x0d18fdb4a5b9b908bdc170588edbb01137e4a31c699fe7fb87f531b410fa7de3", "0x15805b601c4a4935dfa0b4623741935aa83b580f3755a943947f92a8b4a38a5c"]
                },
                "input":[0000000000000000000000000000000000000000000000000000000000000009,0000000000000000000000000000000000000000000000000000000000000001]
            };
            let a = proof.proof.A;//[0x253d1cdbd070721365499f82676934caa75acba51ffa1f787d5b3e8f893f41c3, 0x21a94507ae7e4114c235046a76be6d19a28898fe131e25a7af2ba7b15d6e5f00];
            let ap = proof.proof.A_p;
            let b = proof.proof.B; 
            let bp = proof.proof.B_p;//[[0x115f4bc652cb84d779d00b12d7e82c1e1aeb1c0fed3b33457b5612490c73501c, 0x1a40f886c44edd0b8bd084b00c4dfccce082c5eb35ef00ee27cc05d8b6bc7a18], [0x100fd6440306b21cadfefb3b063d00c98dca661232f27e6dfed2ed7b9e584d38, 0x00403536b4d4bfaea00910f00e89c5283b0619d4fb11d598d47cb6557f12587d]];
            let c = proof.proof.C;
            let cp = proof.proof.C_p;
            let h = proof.proof.H;
            let k = proof.proof.K;//[0x1de9055c2b8251f731bfbeb291ce15a03fe8316c23d3d609e15048642f6d6c61, 0x2baceea4403946da1ec5d8cf14f96d1c669aa95c1ab5d638dab991797d66860f];
            let input = proof.input//[0x0000000000000000000000000000000000000000000000000000000000000009, 0x0000000000000000000000000000000000000000000000000000000000000001];
            let result = await this.contract.verifyTx(a,ap,b,bp,c,cp,h,k,input,{from: owner});
            let success = result.logs[0].event;
            assert.equal(success,"Verified"); //
        })    

    });

})